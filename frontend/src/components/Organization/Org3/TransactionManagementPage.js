import React, { useEffect, useMemo, useState } from 'react';
import { Card, Table, Button, Modal, Form, Input, Select, Space, Tag, message, Drawer, Row, Col, Tooltip, Alert, Typography, Divider, Steps, Collapse } from 'antd';
import '../../../styles/transaction-management.css';
import { 
  PlusOutlined, 
  SearchOutlined, 
  ReloadOutlined, 
  EyeOutlined, 
  HistoryOutlined, 
  FileTextOutlined, 
  CheckCircleOutlined,
  SwapOutlined,
  ScissorOutlined,
  MergeCellsOutlined,
  EditOutlined,
  FileProtectOutlined,
  ArrowRightOutlined,
  
} from '@ant-design/icons';
import transactionService from '../../../services/transactionService';
import authService from '../../../services/auth';
import documentService from '../../../services/documentService';
import { DocumentDetailModal } from '../../Common';
import { REQUIRED_DOCUMENTS, LAND_USE_PURPOSES } from '../../../services/index';

const { TextArea } = Input;

const { Option } = Select;
const { Text } = Typography;

// H√†m ph√¢n lo·∫°i t√†i li·ªáu d·ª±a tr√™n t√™n
const getDocumentTypeFromTitle = (documentTitle) => {
  if (!documentTitle) return null;
  
  const title = documentTitle.toLowerCase();
  
  // Gi·∫•y ch·ª©ng nh·∫≠n -> Certificate
  if (title.includes('gi·∫•y ch·ª©ng nh·∫≠n') || title.includes('ch·ª©ng nh·∫≠n')) {
    return 'CERTIFICATE';
  }
  
  // H·ª£p ƒë·ªìng -> Contract
  if (title.includes('h·ª£p ƒë·ªìng')) {
    return 'CONTRACT';
  }
  
  // ƒê∆°n ƒëƒÉng k√Ω -> Form
  if (title.includes('ƒë∆°n ƒëƒÉng k√Ω') || 
      title.includes('ƒë∆°n ƒë·ªÅ ngh·ªã') || 
      title.includes('ƒë∆°n xin')) {
    return 'FORM';
  }
  
  // B·∫£n ƒë·ªì -> Map
  if (title.includes('b·∫£n v·∫Ω') ||
      title.includes('m·∫£nh tr√≠ch')) {
    return 'MAP';
  }
  
  // B·∫£n k√™ khai n·ªôp thu·∫ø -> Tax Document
  if (title.includes('b·∫£n k√™ khai') || 
      title.includes('k√™ khai') ||
      title.includes('n·ªôp thu·∫ø') ||
      title.includes('thu·∫ø')) {
    return 'TAX_DOCUMENT';
  }
  
  // C√°c lo·∫°i kh√°c kh√¥ng c·∫ßn check
  return null;
};

// H√†m ki·ªÉm tra t√†i li·ªáu c√≥ ph√π h·ª£p v·ªõi y√™u c·∫ßu kh√¥ng
const isDocumentValidForRequirement = (documentTitle, documentType, requiredDocumentName) => {
  const expectedType = getDocumentTypeFromTitle(requiredDocumentName);
  
  // N·∫øu kh√¥ng c·∫ßn ki·ªÉm tra lo·∫°i (expectedType = null), ch·∫•p nh·∫≠n m·ªçi t√†i li·ªáu
  if (!expectedType) {
    return true;
  }
  
  // N·∫øu c·∫ßn ki·ªÉm tra, ph·∫£i ƒë√∫ng lo·∫°i
  return documentType === expectedType;
};

const TransactionManagementPage = () => {
  const [loading, setLoading] = useState(false);
  const [transactions, setTransactions] = useState([]);
  const [pageSize, setPageSize] = useState(10);
  const defaultFilters = {
    keyword: '',
    type: undefined,
    status: undefined
  };
  
  const [filters, setFilters] = useState(defaultFilters);
  const [createOpen, setCreateOpen] = useState(false);
  const [detailOpen, setDetailOpen] = useState(false);
  const [confirmOpen, setConfirmOpen] = useState(false);
  const [linkDocumentOpen, setLinkDocumentOpen] = useState(false);
  const [historyOpen, setHistoryOpen] = useState(false);
  const [selected, setSelected] = useState(null);
  const [history, setHistory] = useState([]);
  const [form] = Form.useForm();
  const [confirmForm] = Form.useForm();
  const [linkDocumentForm] = Form.useForm();
  
  // States for document linking
  const [userDocuments, setUserDocuments] = useState([]);
  const [selectedDocuments, setSelectedDocuments] = useState({}); // Object: { docType: docID }

  
  // States for land management
  const [userLands, setUserLands] = useState([]);
  const [landLoading, setLandLoading] = useState(false);
  
  // States for merge land selection
  const [mergeParcelIds, setMergeParcelIds] = useState(['', '']); // B·∫Øt ƒë·∫ßu v·ªõi 2 field

  // Document detail modal states
  const [documentDetailOpen, setDocumentDetailOpen] = useState(false);
  const [selectedDocument, setSelectedDocument] = useState(null);
  const [documents, setDocuments] = useState([]);
  const [documentsLoading, setDocumentsLoading] = useState(false);
  
  // State for transaction type selection
  const [selectedTransactionType, setSelectedTransactionType] = useState(null);
  // Step state: 0 = ch·ªçn lo·∫°i, 1 = nh·∫≠p th√¥ng tin v√† upload t√†i li·ªáu, 2 = ho√†n t·∫•t
  const [currentStep, setCurrentStep] = useState(0);

  const loadUserDocuments = async () => {
    try {
      const user = authService.getCurrentUser();
      if (!user?.userId) return;
      
      const res = await documentService.getDocumentsByUploader(user.userId);
      const docs = res?.documents || [];
      
      setUserDocuments(docs);
    } catch (e) {
      console.error('L·ªói khi t·∫£i t√†i li·ªáu:', e);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch t√†i li·ªáu');
    }
  };

  const loadUserLands = async () => {
    try {
      setLandLoading(true);
      const user = authService.getCurrentUser();
      if (!user?.userId) return;
      
      // G·ªçi service ƒë·ªÉ l·∫•y danh s√°ch th·ª≠a ƒë·∫•t c·ªßa user
      const res = await transactionService.getLandsByOwner(user.userId);
      const lands = Array.isArray(res) ? res : (res?.data ?? []);
      setUserLands(lands);
    } catch (e) {
      console.error('L·ªói khi t·∫£i danh s√°ch th·ª≠a ƒë·∫•t:', e);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch th·ª≠a ƒë·∫•t');
    } finally {
      setLandLoading(false);
    }
  };
  


  const loadMyTransactions = async () => {
    try {
      setLoading(true);
      const user = authService.getCurrentUser();
      if (!user?.userId) {
        message.error('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng');
        return;
      }
      const res = await transactionService.getTransactionsByUser(user.userId);
      const data = Array.isArray(res) ? res : (res?.data ?? []);
      setTransactions(data);
    } catch (e) {
      message.error(e.message || 'Kh√¥ng t·∫£i ƒë∆∞·ª£c giao d·ªãch c·ªßa t√¥i');
    } finally {
      setLoading(false);
    }
  };



  // Org3 ch·ªâ t·∫£i giao d·ªãch c·ªßa m√¨nh
  useEffect(() => {
    loadMyTransactions();
  }, []);

  useEffect(() => {
    if (createOpen) {
      loadUserDocuments();
      loadUserLands();
      // Khi m·ªü modal, n·∫øu ch∆∞a ch·ªçn lo·∫°i th√¨ v·ªÅ b∆∞·ªõc 0
      setCurrentStep(selectedTransactionType ? 1 : 0);
    }
  }, [createOpen, selectedTransactionType]);

  // Debug form state
  useEffect(() => {
    if (createOpen && currentStep > 0) {
      const formValues = form.getFieldsValue();
      console.log('üìù Current form values:', formValues);
      console.log('üéØ Selected transaction type:', selectedTransactionType);
      console.log('üìÑ Selected documents:', selectedDocuments);
    }
  }, [createOpen, currentStep, form, selectedTransactionType, selectedDocuments]);


  const onSearch = async () => {
    try {
      setLoading(true);
      const res = await transactionService.searchTransactions(filters);
      const data = Array.isArray(res) ? res : (res?.data ?? []);
      setTransactions(data);
    } catch (e) {
      message.error(e.message || 'T√¨m ki·∫øm th·∫•t b·∫°i');
    } finally {
      setLoading(false);
    }
  };

  const onCreate = async () => {
    try {
      const user = authService.getCurrentUser();
      if (!user?.userId) {
        message.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o giao d·ªãch');
        return;
      }

      // Validate form tr∆∞·ªõc khi t·∫°o - nh∆∞ng b·ªè qua landParcelID cho MERGE
      console.log('üîç Debug validation - selectedTransactionType:', selectedTransactionType);
      
      let values;
      try {
        if (selectedTransactionType === 'MERGE') {
          console.log('‚úÖ MERGE: Ch·ªâ validate reason field');
          // V·ªõi MERGE, ch·ªâ validate reason, kh√¥ng c·∫ßn landParcelID
          values = await form.validateFields(['reason']);
        } else {
          console.log('üìù OTHER: Validate t·∫•t c·∫£ fields');
          // V·ªõi c√°c lo·∫°i kh√°c, validate ƒë·∫ßy ƒë·ªß
          values = await form.validateFields();
        }
        console.log('‚úÖ Validation success, values:', values);
      } catch (errorInfo) {
        console.error('‚ùå Validation failed:', errorInfo);
        const errorFields = errorInfo.errorFields || [];
        const errorMessages = errorFields.map(field => field.errors.join(', ')).join('; ');
        message.error(`Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin: ${errorMessages}`);
        return;
      }
      
      // X·ª≠ l√Ω parcelIDs cho MERGE t·ª´ dynamic fields
      if (selectedTransactionType === 'MERGE') {
        const validParcelIds = mergeParcelIds.filter(id => id.trim() !== '');
        if (validParcelIds.length < 2) {
          message.error('C·∫ßn ch·ªçn √≠t nh·∫•t 2 th·ª≠a ƒë·∫•t ƒë·ªÉ g·ªôp');
          return;
        }
        values.parcelIDs = validParcelIds;
      }
      
      // Th√™m transaction type v√†o values
      values.type = selectedTransactionType;
      
      // Kh√¥ng c·∫ßn validation JSON fields cho t·∫°o y√™u c·∫ßu - ch·ªâ c·∫ßn ·ªü b∆∞·ªõc ph√™ duy·ªát

      console.log('üìù Final values before document validation:', values);
      console.log('üéØ mergeParcelIds state:', mergeParcelIds);
      
      // Validation lo·∫°i t√†i li·ªáu ƒë√≠nh k√®m
      const requiredDocs = REQUIRED_DOCUMENTS[selectedTransactionType] || [];
      const documentValidationErrors = [];
      
      for (const requiredDocName of requiredDocs) {
        const selectedDocId = selectedDocuments[requiredDocName];
        if (selectedDocId) {
          // T√¨m th√¥ng tin t√†i li·ªáu ƒë∆∞·ª£c ch·ªçn
          const selectedDoc = userDocuments.find(doc => doc.docID === selectedDocId);
          if (selectedDoc) {
            // Ki·ªÉm tra lo·∫°i t√†i li·ªáu c√≥ ph√π h·ª£p kh√¥ng
            if (!isDocumentValidForRequirement(selectedDoc.title, selectedDoc.type, requiredDocName)) {
              const expectedType = getDocumentTypeFromTitle(requiredDocName);
              if (expectedType) {
                const typeMapping = {
                  'CERTIFICATE': 'Gi·∫•y ch·ª©ng nh·∫≠n',
                  'CONTRACT': 'H·ª£p ƒë·ªìng', 
                  'FORM': 'ƒê∆°n ƒëƒÉng k√Ω',
                  'MAP': 'B·∫£n ƒë·ªì',
                  'TAX_DOCUMENT': 'T√†i li·ªáu thu·∫ø'
                };
                documentValidationErrors.push(
                  `T√†i li·ªáu "${selectedDoc.title}" (lo·∫°i ${selectedDoc.type}) kh√¥ng ph√π h·ª£p v·ªõi y√™u c·∫ßu "${requiredDocName}". C·∫ßn lo·∫°i: ${typeMapping[expectedType] || expectedType}`
                );
              }
            }
          }
        }
      }
      
      if (documentValidationErrors.length > 0) {
        message.error(
          <div>
            <div style={{ marginBottom: 8, fontWeight: 'bold' }}>T√†i li·ªáu ƒë√≠nh k√®m kh√¥ng ph√π h·ª£p:</div>
            {documentValidationErrors.map((error, index) => (
              <div key={`error-${index}`} style={{ marginBottom: 4 }}>‚Ä¢ {error}</div>
            ))}
          </div>
        );
        return;
      }

      console.log('üìù Values before service validation:', values);
      const validation = transactionService.validateTransactionData(values, selectedTransactionType);
      console.log('üìù Service validation result:', validation);
      if (!validation.isValid) {
        console.error('‚ùå Service validation errors:', validation.errors);
        message.warning(validation.errors.join('\n'));
        return;
      }
      setLoading(true);
      
      // Chu·∫©n b·ªã data chung v·ªõi documentIds v√† reason
      const baseData = {
        fromOwnerID: user.userId, // T·ª± ƒë·ªông l·∫•y t·ª´ user hi·ªán t·∫°i
        documentIds: Object.values(selectedDocuments),  // Chuy·ªÉn object th√†nh array
        reason: values.reason || ''  // Th√™m l√Ω do t·∫°o y√™u c·∫ßu
      };
      
      // Ch·ªâ th√™m landParcelID cho c√°c lo·∫°i giao d·ªãch c·∫ßn (kh√¥ng bao g·ªìm MERGE)
      if (selectedTransactionType !== 'MERGE') {
        baseData.landParcelID = values.landParcelID;
      }
      
      switch (selectedTransactionType) {
        case 'TRANSFER':
          await transactionService.createTransferRequest({
            ...baseData,
            toOwnerID: values.toOwnerID
          });
          break;
        case 'SPLIT':
          await transactionService.createSplitRequest({
            ...baseData,
            // Theo chaincode m·ªõi: ch·ªâ c·∫ßn landParcelID, documentIds, reason
            // newParcels s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü b∆∞·ªõc ph√™ duy·ªát
          });
          break;
        case 'MERGE':
          await transactionService.createMergeRequest({
            ...baseData,
            // Theo chaincode m·ªõi: ch·ªâ c·∫ßn parcelIDs, documentIds, reason
            parcelIDs: values.parcelIDs // ƒê√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü tr√™n th√†nh array
            // Chi ti·∫øt c√°ch g·ªôp s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü b∆∞·ªõc ph√™ duy·ªát d·ª±a tr√™n t√†i li·ªáu ƒë√≠nh k√®m
          });
          break;
        case 'CHANGE_PURPOSE':
          await transactionService.createChangePurposeRequest({
            ...baseData,
            ownerID: user.userId, // T·ª± ƒë·ªông l·∫•y t·ª´ user hi·ªán t·∫°i
            newPurpose: values.newPurpose
            });
          break;
        case 'REISSUE':
          await transactionService.createReissueRequest({
            ...baseData,
            ownerID: user.userId // T·ª± ƒë·ªông l·∫•y t·ª´ user hi·ªán t·∫°i
          });
          break;
        default:
          throw new Error('Lo·∫°i giao d·ªãch kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£');
      }
      
      message.success(`T·∫°o y√™u c·∫ßu th√†nh c√¥ng${Object.keys(selectedDocuments).length > 0 ? ` v·ªõi ${Object.keys(selectedDocuments).length} t√†i li·ªáu ƒë√≠nh k√®m` : ''}`);
      setCreateOpen(false);
      form.resetFields();
      setSelectedDocuments({});  // Reset danh s√°ch t√†i li·ªáu ƒë√£ ch·ªçn
      setSelectedTransactionType(null);  // Reset lo·∫°i giao d·ªãch ƒë√£ ch·ªçn
      setMergeParcelIds(['', '']); // Reset merge parcel fields
      loadMyTransactions();
    } catch (e) {
      message.error(e.message || 'T·∫°o y√™u c·∫ßu th·∫•t b·∫°i');
    } finally {
      setLoading(false);
    }
  };

  const onConfirm = async (isAccepted) => {
    try {
      const values = await confirmForm.validateFields();
      setLoading(true);
      
      await transactionService.confirmTransfer({
        txID: values.txID,
        landParcelID: values.landParcelID,
        toOwnerID: values.toOwnerID,
        isAccepted: isAccepted,
        reason: values.reason || ''
      });
      
      const actionText = isAccepted ? 'ch·∫•p nh·∫≠n' : 't·ª´ ch·ªëi';
      message.success(`${actionText} giao d·ªãch chuy·ªÉn nh∆∞·ª£ng th√†nh c√¥ng!`);
      setConfirmOpen(false);
      confirmForm.resetFields();
      loadMyTransactions();
    } catch (e) {
      message.error(e.message || 'X·ª≠ l√Ω th·∫•t b·∫°i');
    } finally {
      setLoading(false);
    }
  };

  // Link supplement documents to transaction - UC-18
  const onLinkSupplementDocuments = async () => {
    try {
      console.log('üîî B·∫Øt ƒë·∫ßu li√™n k·∫øt t√†i li·ªáu b·ªï sung');
      console.log('üìù Selected transaction:', selected);
      console.log('üìÅ User documents:', userDocuments);
      
      // Ki·ªÉm tra t√†i li·ªáu kh·∫£ d·ª•ng
      const existingDocIds = selected?.documentIds || [];
      const availableDocs = userDocuments.filter(doc => !existingDocIds.includes(doc.docID));
      console.log('üìä Available documents for supplement:', availableDocs);
      console.log('üîó Existing document IDs:', existingDocIds);
      
      if (availableDocs.length === 0) {
        message.warning('Kh√¥ng c√≥ t√†i li·ªáu m·ªõi n√†o ƒë·ªÉ b·ªï sung. T·∫•t c·∫£ t√†i li·ªáu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c li√™n k·∫øt v·ªõi giao d·ªãch n√†y.');
        return;
      }
      
      let values;
      try {
        values = await linkDocumentForm.validateFields();
        console.log('üìù Form values:', values);
      } catch (validationError) {
        console.error('‚ùå Validation error:', validationError);
        console.log('üìÑ Validation error details:');
        console.log('  - values:', validationError.values);
        console.log('  - errorFields:', validationError.errorFields);
        console.log('  - outOfDate:', validationError.outOfDate);
        
        if (validationError.errorFields && validationError.errorFields.length > 0) {
          const errorMessages = validationError.errorFields.map(field => {
            const fieldName = field.name.join('.');
            const errors = field.errors.join(', ');
            console.log(`  - Field "${fieldName}": ${errors}`);
            return `${fieldName}: ${errors}`;
          }).join('; ');
          message.error(`Vui l√≤ng ki·ªÉm tra l·∫°i: ${errorMessages}`);
        } else {
          message.warning('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt t√†i li·ªáu ƒë·ªÉ b·ªï sung');
        }
        return;
      }
      
      if (!values.selectedDocuments || values.selectedDocuments.length === 0) {
        message.warning('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt t√†i li·ªáu ƒë·ªÉ b·ªï sung');
        return;
      }

      if (!selected || !selected.txId) {
        message.error('Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c giao d·ªãch');
        return;
      }

      console.log('üîó G·ªçi request li√™n k·∫øt:', {
        docIDs: values.selectedDocuments,
        txID: selected.txId
      });

      setLoading(true);
      await documentService.linkDocumentToTransaction(values.selectedDocuments, selected.txId);
      
      message.success(`ƒê√£ li√™n k·∫øt ${values.selectedDocuments.length} t√†i li·ªáu b·ªï sung v·ªõi giao d·ªãch th√†nh c√¥ng`);
      setLinkDocumentOpen(false);
      linkDocumentForm.resetFields();
      loadMyTransactions();
    } catch (e) {
      console.error('‚ùå L·ªói khi li√™n k·∫øt t√†i li·ªáu:', e);
      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
      if (e.response) {
        // L·ªói t·ª´ API backend
        message.error(e.response.data?.message || e.message || 'L·ªói t·ª´ server khi li√™n k·∫øt t√†i li·ªáu');
      } else if (e.message) {
        // L·ªói c√≥ message
        message.error(e.message);
      } else {
        // L·ªói kh√¥ng x√°c ƒë·ªãnh
        message.error('Li√™n k·∫øt t√†i li·ªáu b·ªï sung th·∫•t b·∫°i');
      }
    } finally {
      setLoading(false);
    }
  };

  const onViewHistory = async (txID) => {
    try {
      const res = await transactionService.getTransactionHistory(txID);
      setHistory(Array.isArray(res) ? res : (res?.data ?? []));
      setHistoryOpen(true);
    } catch (e) {
      message.error(e.message || 'Kh√¥ng t·∫£i ƒë∆∞·ª£c l·ªãch s·ª≠');
    }
  };

  const onViewDetail = async (record) => {
    setSelected(record);
    setDetailOpen(true);
    
    // Load documents if available
    if (record.documentIds && record.documentIds.length > 0) {
      setDocuments([]);
      setDocumentsLoading(true);
      
      try {
        const docPromises = record.documentIds.map(async (docId) => {
          try {
            return await documentService.getDocument(docId);
          } catch (e) {
            console.warn(`Kh√¥ng th·ªÉ load t√†i li·ªáu ${docId}:`, e);
            return null;
          }
        });
        
        const docs = await Promise.all(docPromises);
        const validDocs = docs.filter(doc => doc !== null);
        setDocuments(validDocs);
        
        console.log('üìÑ Loaded documents:', validDocs.length, 'out of', record.documentIds.length);
      } catch (e) {
        console.warn('Kh√¥ng th·ªÉ load danh s√°ch t√†i li·ªáu:', e);
        setDocuments([]);
      } finally {
        setDocumentsLoading(false);
      }
    } else {
      setDocuments([]);
      setDocumentsLoading(false);
    }
  };

  const onViewDocumentDetail = async (document) => {
    setSelectedDocument(document);
    setDocumentDetailOpen(true);
    console.log('üîó M·ªü modal xem chi ti·∫øt t√†i li·ªáu:', document.docID);
  };

  const getStatusTag = (status) => {
    const statusColors = {
      'PENDING': 'orange',
      'VERIFIED': 'blue',
      'APPROVED': 'green',
      'REJECTED': 'red',
      'CONFIRMED': 'green',
      'SUPPLEMENT_REQUESTED': 'gold'
    };
    return <Tag color={statusColors[status] || 'default'}>{transactionService.getTransactionStatusText(status)}</Tag>;
  };

  const getTypeTag = (type) => {
    return <Tag color="blue">{transactionService.getTransactionTypeText(type)}</Tag>;
  };

  const getDocumentStatusColor = (doc) => {
    if (doc.status === 'VERIFIED') return 'green';
    if (doc.status === 'REJECTED') return 'red';
    return 'orange';
  };

  const getDocumentStatusText = (doc) => {
    if (doc.status === 'VERIFIED') return 'ƒê√£ th·∫©m ƒë·ªãnh';
    if (doc.status === 'REJECTED') return 'Kh√¥ng h·ª£p l·ªá';
    return 'Ch·ªù x√°c th·ª±c';
  };

  const getTransactionTypeText = (type) => {
    const typeTexts = {
      'TRANSFER': 'Chuy·ªÉn nh∆∞·ª£ng quy·ªÅn s·ª≠ d·ª•ng ƒë·∫•t',
      'SPLIT': 'T√°ch th·ª≠a ƒë·∫•t',
      'MERGE': 'H·ª£p th·ª≠a ƒë·∫•t', 
      'CHANGE_PURPOSE': 'Thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng ƒë·∫•t',
      'REISSUE': 'C·∫•p l·∫°i gi·∫•y ch·ª©ng nh·∫≠n'
    };
    return typeTexts[type] || type;
  };

  const canConfirm = (transaction) => {
    const user = authService.getCurrentUser();
    // Ch·ªâ hi·ªÉn th·ªã button x√°c nh·∫≠n khi:
    // 1. Giao d·ªãch ƒë√£ ƒë∆∞·ª£c APPROVED
    // 2. L√† giao d·ªãch TRANSFER 
    // 3. User hi·ªán t·∫°i l√† ng∆∞·ªùi nh·∫≠n chuy·ªÉn nh∆∞·ª£ng (toOwnerId)
    return transaction.status === 'APPROVED' && 
           transaction.type === 'TRANSFER' &&
           user?.userId === transaction.toOwnerId;
  };

  const canSupplement = (transaction) => {
    return transaction.status === 'SUPPLEMENT_REQUESTED';
  };

  const columns = useMemo(() => ([
    { title: 'M√£ giao d·ªãch', dataIndex: 'txId', key: 'txId' },
    { title: 'Lo·∫°i', dataIndex: 'type', key: 'type', render: v => getTypeTag(v) },
    { title: 'Th·ª≠a ƒë·∫•t', dataIndex: 'landParcelId', key: 'landParcelId' },
            { 
          title: 'Ng∆∞·ªùi g·ª≠i', 
          dataIndex: 'fromOwnerId', 
          key: 'fromOwnerId',
          render: (v) => {
            const currentUser = authService.getCurrentUser();
            return v === currentUser?.userId ? 
              <Tag color="blue">B·∫°n</Tag> : 
              <code>{v}</code>
          }
        },
    { title: 'Ng∆∞·ªùi nh·∫≠n', dataIndex: 'toOwnerId', key: 'toOwnerId', render: v => v || '-' },
    { title: 'Tr·∫°ng th√°i', dataIndex: 'status', key: 'status', render: v => getStatusTag(v) },
    { title: 'Ng√†y t·∫°o', dataIndex: 'createdAt', key: 'createdAt', render: v => v ? new Date(v).toLocaleDateString('vi-VN') : 'N/A' },
    {
      title: 'Thao t√°c', key: 'actions', fixed: 'right', render: (_, record) => (
        <Space>
          <Tooltip title="Xem chi ti·∫øt">
            <Button icon={<EyeOutlined />} onClick={() => onViewDetail(record)} />
          </Tooltip>
          <Tooltip title="L·ªãch s·ª≠">
            <Button icon={<HistoryOutlined />} onClick={() => onViewHistory(record.txId)} />
          </Tooltip>
          {canConfirm(record) && (
            <Tooltip title="X√°c nh·∫≠n">
              <Button 
                type="primary" 
                icon={<CheckCircleOutlined />} 
                onClick={() => {
                  setSelected(record);
                  confirmForm.setFieldsValue({ 
                    txID: record.txId,
                    landParcelID: record.landParcelId,
                    toOwnerID: record.toOwnerId
                  });
                  setConfirmOpen(true);
                }}
              >
                X√°c nh·∫≠n
              </Button>
            </Tooltip>
          )}
          {canSupplement(record) && (
            <Tooltip title="B·ªï sung t√†i li·ªáu theo y√™u c·∫ßu">
              <Button 
                type="default" 
                icon={<FileTextOutlined />} 
                onClick={async () => {
                  setSelected(record);
                  // Load danh s√°ch t√†i li·ªáu c·ªßa user tr∆∞·ªõc khi m·ªü modal
                  await loadUserDocuments();
                  setLinkDocumentOpen(true);
                }}
                style={{ backgroundColor: '#faad14', borderColor: '#faad14', color: 'white' }}
              >
                B·ªï sung
              </Button>
            </Tooltip>
          )}
        </Space>
      )
    }
  ]), [confirmForm]);

  const renderDocumentSection = (selectedType) => {
    if (!selectedType) return null;

    const requiredDocs = REQUIRED_DOCUMENTS[selectedType] || [];
    
    return (
      <div style={{ maxHeight: 'none', overflow: 'visible' }}>
        <Alert
          message="üìã Y√™u c·∫ßu t√†i li·ªáu"
          description={`Lo·∫°i giao d·ªãch n√†y y√™u c·∫ßu ${requiredDocs.length} t√†i li·ªáu. Vui l√≤ng ƒë√≠nh k√®m ƒë·∫ßy ƒë·ªß c√°c t√†i li·ªáu sau:`}
          type="info"
          showIcon
          style={{ marginBottom: '20px' }}
        />
        
        <div style={{ marginBottom: 16, maxHeight: 'none', overflow: 'visible' }}>
          {requiredDocs.map((docType, index) => (
            <Card
              key={`doc-${index}-${docType}`}
              size="small"
              className="document-requirement-card"
              style={{ marginBottom: 16 }}
              styles={{ body: { padding: '16px' } }}
            >
              <div style={{ marginBottom: 12 }}>
                <div style={{ 
                  fontWeight: 'bold', 
                  color: '#1890ff', 
                  marginBottom: 6,
                  fontSize: '14px'
                }}>
                  {index + 1}. {docType}
                </div>
                {(() => {
                  const expectedType = getDocumentTypeFromTitle(docType);
                  if (expectedType) {
                    const typeMapping = {
                      'CERTIFICATE': 'Gi·∫•y ch·ª©ng nh·∫≠n',
                      'CONTRACT': 'H·ª£p ƒë·ªìng', 
                      'FORM': 'ƒê∆°n ƒëƒÉng k√Ω',
                      'MAP': 'B·∫£n ƒë·ªì',
                      'TAX_DOCUMENT': 'T√†i li·ªáu thu·∫ø'
                    };
                    return (
                      <div style={{ 
                        fontSize: '12px', 
                        color: '#666',
                        background: '#f6f6f6',
                        padding: '4px 8px',
                        borderRadius: '4px',
                        marginBottom: 8
                      }}>
                        üí° C·∫ßn lo·∫°i t√†i li·ªáu: <strong>{typeMapping[expectedType] || expectedType}</strong>
                      </div>
                    );
                  }
                  return (
                    <div style={{ 
                      fontSize: '12px', 
                      color: '#52c41a',
                      background: '#f6ffed',
                      padding: '4px 8px',
                      borderRadius: '4px',
                      marginBottom: 8
                    }}>
                      ‚úÖ Ch·∫•p nh·∫≠n m·ªçi lo·∫°i t√†i li·ªáu
                    </div>
                  );
                })()}
              </div>
              <div style={{ 
              display: 'flex', 
              alignItems: 'center',
                gap: 12
              }}>
                <Select
                  placeholder="Ch·ªçn t√†i li·ªáu..."
                  style={{ width: '100%' }}
                  allowClear
                  value={selectedDocuments[docType] || undefined}
                  onChange={(docID) => {
                    if (docID) {
                      // T·ª± ƒë·ªông g·ª° file c≈© c√πng lo·∫°i tr∆∞·ªõc khi th√™m file m·ªõi
                      setSelectedDocuments(prev => ({
                        ...prev,
                        [docType]: docID
                      }));
                      message.success('ƒê√£ ƒë√≠nh k√®m t√†i li·ªáu');
                    } else {
                      // Khi clear dropdown, g·ª° file c√πng lo·∫°i
                      setSelectedDocuments(prev => {
                        const newState = { ...prev };
                        delete newState[docType];
                        return newState;
                      });
                      message.info('ƒê√£ g·ª° t√†i li·ªáu');
                    }
                  }}
                >
                  {userDocuments.length === 0 ? (
                    <Option disabled value="no-docs">
                      Kh√¥ng c√≥ t√†i li·ªáu n√†o
                    </Option>
                  ) : (
                    userDocuments
                      .filter(doc => !Object.values(selectedDocuments).includes(doc.docID)) // Ch·ªâ hi·ªÉn th·ªã t√†i li·ªáu ch∆∞a ƒë∆∞·ª£c ch·ªçn
                      .filter(doc => isDocumentValidForRequirement(doc.title, doc.type, docType)) // Ki·ªÉm tra lo·∫°i t√†i li·ªáu ph√π h·ª£p
                    .map((doc) => (
                      <Option key={doc.docID} value={doc.docID}>
                        <Tag color="blue" size="small">{doc.type}</Tag>
                        {doc.title}
                        {!isDocumentValidForRequirement(doc.title, doc.type, docType) && (
                          <Tag color="orange" size="small" style={{ marginLeft: 4 }}>
                            Kh√¥ng ph√π h·ª£p
                          </Tag>
                        )}
                      </Option>
                    ))
                  )}
                </Select>
                {selectedDocuments[docType] && (
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    width: '24px',
                    height: '24px',
                    background: '#52c41a',
                    borderRadius: '50%',
                    boxShadow: '0 2px 4px rgba(82, 196, 26, 0.3)',
                    flexShrink: 0
                  }}>
                    <div style={{
                      width: '8px',
                      height: '8px',
                      background: '#fff',
                      borderRadius: '50%'
                    }} />
                  </div>
                )}
              </div>
            </Card>
          ))}
        </div>
      </div>
    );
  };

  const renderTransactionTypeSelection = () => {
    const transactionTypes = [
      {
        key: 'TRANSFER',
        title: 'Chuy·ªÉn nh∆∞·ª£ng quy·ªÅn s·ª≠ d·ª•ng ƒë·∫•t',
        description: 'Chuy·ªÉn quy·ªÅn s·ª≠ d·ª•ng ƒë·∫•t t·ª´ ng∆∞·ªùi n√†y sang ng∆∞·ªùi kh√°c',
        icon: <SwapOutlined style={{ fontSize: '24px', color: '#1890ff' }} />,
        color: '#1890ff',
        bgColor: '#e6f7ff'
      },
      {
        key: 'SPLIT',
        title: 'T√°ch th·ª≠a ƒë·∫•t',
        description: 'Chia m·ªôt th·ª≠a ƒë·∫•t th√†nh nhi·ªÅu th·ª≠a ƒë·∫•t nh·ªè h∆°n',
        icon: <ScissorOutlined style={{ fontSize: '24px', color: '#52c41a' }} />,
        color: '#52c41a',
        bgColor: '#f6ffed'
      },
      {
        key: 'MERGE',
        title: 'H·ª£p th·ª≠a ƒë·∫•t',
        description: 'G·ªôp nhi·ªÅu th·ª≠a ƒë·∫•t th√†nh m·ªôt th·ª≠a ƒë·∫•t l·ªõn h∆°n',
        icon: <MergeCellsOutlined style={{ fontSize: '24px', color: '#722ed1' }} />,
        color: '#722ed1',
        bgColor: '#f9f0ff'
      },
      {
        key: 'CHANGE_PURPOSE',
        title: 'Thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng ƒë·∫•t',
        description: 'Thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng c·ªßa th·ª≠a ƒë·∫•t',
        icon: <EditOutlined style={{ fontSize: '24px', color: '#fa8c16' }} />,
        color: '#fa8c16',
        bgColor: '#fff7e6'
      },
      {
        key: 'REISSUE',
        title: 'C·∫•p l·∫°i gi·∫•y ch·ª©ng nh·∫≠n',
        description: 'C·∫•p l·∫°i gi·∫•y ch·ª©ng nh·∫≠n quy·ªÅn s·ª≠ d·ª•ng ƒë·∫•t',
        icon: <FileProtectOutlined style={{ fontSize: '24px', color: '#eb2f96' }} />,
        color: '#eb2f96',
        bgColor: '#fff0f6'
      }
    ];

    return (
      <div style={{ padding: '20px 0' }}>
        {/* Header */}
        <div className="gradient-header" style={{ textAlign: 'center' }}>
          <h2 style={{ 
            margin: 0, 
            fontSize: '24px', 
            fontWeight: 600,
            marginBottom: '8px'
          }}>
            üè† T·∫°o Giao D·ªãch Bi·∫øn ƒê·ªông ƒê·∫•t ƒêai
          </h2>
          <p style={{ 
            margin: '0 auto', 
            fontSize: '14px', 
            opacity: 0.9,
            maxWidth: '500px'
          }}>
            Ch·ªçn lo·∫°i giao d·ªãch b·∫°n mu·ªën th·ª±c hi·ªán. H·ªá th·ªëng s·∫Ω h∆∞·ªõng d·∫´n b·∫°n qua c√°c b∆∞·ªõc ti·∫øp theo.
          </p>
        </div>

        {/* Transaction Type Cards */}
        <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>
          {transactionTypes.map((type) => (
            <Col xs={24} sm={12} lg={8} key={type.key}>
              <Card
                hoverable
                className="transaction-type-card"
                style={{
                  height: '100%',
                  cursor: 'pointer',
                  borderRadius: '12px',
                  overflow: 'hidden'
                }}
                styles={{
                  body: {
                    padding: '24px',
                    textAlign: 'center',
                    background: type.bgColor,
                    height: '100%',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'space-between'
                  }
                }}
                onClick={() => setSelectedTransactionType(type.key)}
              >
                <div>
                  <div style={{ marginBottom: '16px' }}>
                    {type.icon}
                  </div>
                  <h3 style={{ 
                    margin: '0 0 8px 0', 
                    fontSize: '16px', 
                    fontWeight: 600,
                    color: type.color
                  }}>
                    {type.title}
                  </h3>
                  <p style={{ 
                    margin: 0, 
                    fontSize: '13px', 
                    color: '#666',
                    lineHeight: '1.4'
                  }}>
                    {type.description}
                  </p>
                </div>
                <div style={{ 
                  marginTop: '16px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: type.color,
                  fontSize: '12px',
                  fontWeight: 500
                }}>
                  <ArrowRightOutlined style={{ marginRight: '4px' }} />
                  Ch·ªçn lo·∫°i n√†y
                </div>
              </Card>
            </Col>
          ))}
        </Row>

        {/* Footer */}
        <div style={{ 
          textAlign: 'center', 
          padding: '16px',
          background: '#f8f9fa',
          borderRadius: '8px',
          border: '1px solid #e9ecef'
        }}>
          <Text type="secondary" style={{ fontSize: '13px' }}>
            üí° M·ªói lo·∫°i giao d·ªãch c√≥ y√™u c·∫ßu t√†i li·ªáu kh√°c nhau. H√£y chu·∫©n b·ªã s·∫µn c√°c t√†i li·ªáu c·∫ßn thi·∫øt.
          </Text>
        </div>
      </div>
    );
  };

  const renderCreateForm = () => {
    // B∆∞·ªõc 0: Ch·ªçn lo·∫°i giao d·ªãch
    if (currentStep === 0 || !selectedTransactionType) {
      return renderTransactionTypeSelection();
    }

    // B∆∞·ªõc 1 v√† 2: Hi·ªÉn th·ªã theo t·ª´ng ph·∫ßn
    return (
      <div>
        {/* Progress Steps */}
        <div style={{ marginBottom: '32px' }}>
          <Steps
            current={currentStep}
            items={[
              { title: 'Ch·ªçn lo·∫°i giao d·ªãch' },
              { title: 'Nh·∫≠p th√¥ng tin v√† t√†i li·ªáu' },
              { title: 'Ho√†n t·∫•t' }
            ]}
          />
        </div>

        {/* Header v·ªõi lo·∫°i giao d·ªãch ƒë√£ ch·ªçn */}
        <Card
          style={{ marginBottom: '24px', background: 'white', border: '1px solid #f0f0f0' }}
          styles={{ body: { padding: '20px' } }}
        >
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <div>
              <h3 style={{ margin: 0, fontSize: '18px', fontWeight: 600, marginBottom: '4px' }}>üéØ Lo·∫°i giao d·ªãch ƒë√£ ch·ªçn</h3>
              <p style={{ margin: 0, opacity: 0.9, fontSize: '14px' }}>{getTransactionTypeText(selectedTransactionType)}</p>
            </div>
            <Button 
              onClick={() => {
                setSelectedTransactionType(null);
                setSelectedDocuments({});
                form.resetFields();
                setCurrentStep(0);
              }}
            >
              Ch·ªçn l·∫°i
            </Button>
          </div>
        </Card>

        {currentStep === 1 && (
          <Form layout="vertical" form={form}>
            <Collapse
              defaultActiveKey={['info', 'documents']}
              ghost
              style={{ background: 'transparent' }}
              items={[
                {
                  key: 'info',
                  label: (
                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                      <span style={{ fontSize: '16px' }}>üìù</span>
                      <span style={{ fontSize: '16px', fontWeight: 600 }}>Th√¥ng tin giao d·ªãch</span>
                    </div>
                  ),
                  children: (
                    <div style={{ padding: '0 24px 16px 24px' }}>
                      {/* CCCD ch·ªß s·ªü h·ªØu s·∫Ω t·ª± ƒë·ªông l·∫•y t·ª´ user hi·ªán t·∫°i */}
                      <Form.Item 
                        label={
                          <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                            <span style={{ color: '#52c41a' }}>üë§</span>
                            <span>CCCD ch·ªß s·ªü h·ªØu</span>
                          </div>
                        }
                      >
                        <Input 
                          value={authService.getCurrentUser()?.userId || 'N/A'} 
                          disabled 
                          style={{ 
                            backgroundColor: '#f5f5f5',
                            borderRadius: '8px',
                            border: '1px solid #d9d9d9'
                          }}
                        />
                      </Form.Item>

                      {/* Conditional fields d·ª±a tr√™n lo·∫°i giao d·ªãch ƒë√£ ch·ªçn */}
                      {/* Field m√£ th·ª≠a ƒë·∫•t ch·ªâ hi·ªán th·ªã v·ªõi c√°c lo·∫°i kh√°c MERGE */}
                      {selectedTransactionType && selectedTransactionType !== 'MERGE' && (
                        <Form.Item 
                          name="landParcelID" 
                          label={
                            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                              <span style={{ color: '#1890ff' }}>üè†</span>
                              <span>M√£ th·ª≠a ƒë·∫•t</span>
                            </div>
                          } 
                          rules={[{ required: true, message: 'B·∫Øt bu·ªôc' }]}
                        >
                          <Select 
                            placeholder="Ch·ªçn th·ª≠a ƒë·∫•t" 
                            showSearch={false}
                            loading={landLoading}
                            notFoundContent={landLoading ? 'ƒêang t·∫£i...' : 'Kh√¥ng c√≥ th·ª≠a ƒë·∫•t n√†o'}
                            optionLabelProp="value"
                            style={{ borderRadius: '8px' }}
                          >
                            {userLands.map((land) => (
                              <Option key={`land-${land.id}`} value={land.id}>
                                <div style={{ padding: '4px 0' }}>
                                  <div style={{ fontWeight: 'bold', color: '#1890ff' }}>
                                    {land.id}
                                  </div>
                                  <div style={{ fontSize: '12px', color: '#666' }}>
                                    Di·ªán t√≠ch: {land.area}m¬≤ | M·ª•c ƒë√≠ch: {LAND_USE_PURPOSES[land.landUsePurpose] || land.landUsePurpose || 'Ch∆∞a c√≥'}
                                  </div>
                                  <div style={{ fontSize: '12px', color: '#666' }}>
                                    Ph√°p l√Ω: {land.legalStatus && land.legalStatus.trim() !== '' ? land.legalStatus : 'Ch∆∞a c√≥'} | ƒê·ªãa ch·ªâ: {land.location || 'Ch∆∞a c√≥'}
                                  </div>
                                </div>
                              </Option>
                            ))}
                          </Select>
                          {userLands.length === 0 && !landLoading && (
                            <div style={{ marginTop: 8, color: '#ff4d4f', fontSize: '12px' }}>
                              ‚ö†Ô∏è B·∫°n ch∆∞a c√≥ th·ª≠a ƒë·∫•t n√†o. Vui l√≤ng li√™n h·ªá c∆° quan qu·∫£n l√Ω ƒë·∫•t ƒëai.
                            </div>
                          )}
                        </Form.Item>
                      )}
                      
                      {selectedTransactionType === 'TRANSFER' && (
                        <Form.Item 
                          name="toOwnerID" 
                          label={
                            <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                              <span style={{ color: '#1890ff' }}>üîÑ</span>
                              <span>CCCD ng∆∞·ªùi nh·∫≠n chuy·ªÉn nh∆∞·ª£ng</span>
                            </div>
                          } 
                          rules={[{ required: true, message: 'B·∫Øt bu·ªôc' }]}
                        >
                          <Input 
                            placeholder="Nh·∫≠p s·ªë CCCD ng∆∞·ªùi nh·∫≠n" 
                            style={{ borderRadius: '8px' }}
                          />
                        </Form.Item>
                      )}

                      {selectedTransactionType === 'CHANGE_PURPOSE' && (
                        <Form.Item name="newPurpose" label="M·ª•c ƒë√≠ch s·ª≠ d·ª•ng m·ªõi" rules={[{ required: true, message: 'B·∫Øt bu·ªôc' }]}>
                          <Select placeholder="Ch·ªçn m·ª•c ƒë√≠ch s·ª≠ d·ª•ng">
                            {Object.entries(LAND_USE_PURPOSES).map(([code, name]) => (
                              <Option key={`purpose-${code}`} value={code}>{code} - {name}</Option>
                            ))}
                          </Select>
                        </Form.Item>
                      )}

                      {selectedTransactionType === 'MERGE' && (
                        <div style={{ marginBottom: '24px' }}>
                          <div style={{ 
                            display: 'flex', 
                            alignItems: 'center', 
                            gap: '4px',
                            marginBottom: '12px' 
                          }}>
                            <span style={{ color: '#722ed1' }}>üèóÔ∏è</span>
                            <span style={{ fontWeight: '500' }}>C√°c th·ª≠a ƒë·∫•t c·∫ßn g·ªôp</span>
                            <span style={{ color: '#ff4d4f' }}>*</span>
                          </div>
                          <div style={{ marginBottom: '8px', fontSize: '12px', color: '#666' }}>
                            Chi ti·∫øt c√°ch g·ªôp s·∫Ω ƒë∆∞·ª£c th·ªÉ hi·ªán trong b·∫£n ƒë·ªì v√† t√†i li·ªáu ƒë√≠nh k√®m.
                          </div>
                          
                          {mergeParcelIds.map((parcelId, index) => (
                            <div key={index} style={{ 
                              display: 'flex', 
                              alignItems: 'center', 
                              gap: '12px',
                              marginBottom: '12px' 
                            }}>
                              <div style={{ minWidth: '80px', fontSize: '14px', color: '#666' }}>
                                Th·ª≠a {index + 1}:
                              </div>
                              <Select
                                placeholder="Ch·ªçn th·ª≠a ƒë·∫•t"
                                style={{ flex: 1, borderRadius: '8px' }}
                                value={parcelId || undefined}
                                onChange={(value) => {
                                  const newParcelIds = [...mergeParcelIds];
                                  newParcelIds[index] = value || '';
                                  setMergeParcelIds(newParcelIds);
                                }}
                                loading={landLoading}
                                showSearch
                                optionFilterProp="children"
                                filterOption={(input, option) => {
                                  const optionText = option.children.props?.children?.[0]?.props?.children || option.children;
                                  return optionText?.toLowerCase().indexOf(input.toLowerCase()) >= 0;
                                }}
                                optionLabelProp="value"
                              >
                                {userLands
                                  .filter(land => !mergeParcelIds.includes(land.id) || land.id === parcelId)
                                  .map((land) => (
                                  <Option key={`merge-land-${land.id}`} value={land.id}>
                                    <div style={{ padding: '2px 0' }}>
                                      <div style={{ fontWeight: 'bold', color: '#1890ff', fontSize: '14px' }}>
                                        {land.id}
                                      </div>
                                      <div style={{ fontSize: '11px', color: '#666', lineHeight: '1.3' }}>
                                        Di·ªán t√≠ch: {land.area}m¬≤
                                      </div>
                                      <div style={{ fontSize: '11px', color: '#666', lineHeight: '1.3' }}>
                                        M·ª•c ƒë√≠ch: {LAND_USE_PURPOSES[land.landUsePurpose] || land.landUsePurpose || 'Ch∆∞a c√≥'}
                                      </div>
                                    </div>
                                  </Option>
                                ))} 
                              </Select>
                              
                              {/* Button remove ch·ªâ hi·ªán khi c√≥ h∆°n 2 field */}
                              {mergeParcelIds.length > 2 && (
                                <Button 
                                  type="text" 
                                  danger
                                  icon={<span>‚ùå</span>}
                                  size="small"
                                  onClick={() => {
                                    const newParcelIds = mergeParcelIds.filter((_, i) => i !== index);
                                    setMergeParcelIds(newParcelIds);
                                  }}
                                  style={{ minWidth: '32px' }}
                                />
                              )}
                            </div>
                          ))}
                          
                          {/* Button th√™m th·ª≠a ƒë·∫•t */}
                          <Button 
                            type="dashed" 
                            icon={<span>‚ûï</span>}
                            onClick={() => {
                              setMergeParcelIds([...mergeParcelIds, '']);
                            }}
                            style={{ 
                              width: '100%',
                              marginTop: '8px',
                              borderRadius: '8px',
                              color: '#722ed1',
                              borderColor: '#722ed1'
                            }}
                            disabled={userLands.length <= mergeParcelIds.filter(id => id !== '').length}
                          >
                            Th√™m th·ª≠a ƒë·∫•t c·∫ßn g·ªôp
                          </Button>
                          
                          {userLands.length === 0 && !landLoading && (
                            <div style={{ 
                              marginTop: '12px', 
                              padding: '8px 12px',
                              background: '#fff2f0',
                              borderRadius: '6px',
                              border: '1px solid #ffccc7',
                              color: '#ff4d4f', 
                              fontSize: '12px' 
                            }}>
                              ‚ö†Ô∏è B·∫°n ch∆∞a c√≥ th·ª≠a ƒë·∫•t n√†o. Vui l√≤ng li√™n h·ªá c∆° quan qu·∫£n l√Ω ƒë·∫•t ƒëai.
                            </div>
                          )}
                          
                          {/* Hi·ªÉn th·ªã t√≥m t·∫Øt */}
                          {mergeParcelIds.filter(id => id !== '').length >= 2 && (
                            <div style={{
                              marginTop: '12px',
                              padding: '12px',
                              background: '#f6ffed',
                              borderRadius: '6px',
                              border: '1px solid #b7eb8f'
                            }}>
                              <div style={{ color: '#52c41a', fontWeight: '500', marginBottom: '4px' }}>
                                ‚úÖ S·∫µn s√†ng g·ªôp {mergeParcelIds.filter(id => id !== '').length} th·ª≠a ƒë·∫•t
                              </div>
                              <div style={{ fontSize: '12px', color: '#666' }}>
                                C√°c th·ª≠a ƒë·∫•t: {mergeParcelIds.filter(id => id !== '').join(', ')}
                              </div>
                            </div>
                          )}
                        </div>
                      )}

                      {/* L√Ω do t·∫°o y√™u c·∫ßu */}
                      <Form.Item 
                        name="reason" 
                        label={
                          <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                            <span style={{ color: '#1890ff' }}>üí¨</span>
                            <span>L√Ω do t·∫°o y√™u c·∫ßu</span>
                          </div>
                        } 
                        rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p l√Ω do t·∫°o y√™u c·∫ßu' }]}
                      >
                        <Input.TextArea 
                          placeholder="Nh·∫≠p l√Ω do t·∫°o y√™u c·∫ßu..." 
                          rows={3}
                          maxLength={500}
                          showCount
                          style={{ borderRadius: '8px' }}
                        />
                      </Form.Item>
                    </div>
                  )
                },
                {
                  key: 'documents',
                  label: (
                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                      <span style={{ fontSize: '16px' }}>üìé</span>
                      <span style={{ fontSize: '16px', fontWeight: 600 }}>T√†i li·ªáu ƒë√≠nh k√®m</span>
                    </div>
                  ),
                  children: (
                    <div style={{ padding: '0 24px 16px 24px' }}>
                      {renderDocumentSection(selectedTransactionType)}
                    </div>
                  )
                }
              ]}
            />
          </Form>
        )}
      </div>
    );
  };

  return (
    <Card
      title="Qu·∫£n l√Ω giao d·ªãch (Org3)"
      extra={
        <Space>
          <Input
            className="search-input"
            placeholder="T·ª´ kh√≥a"
            allowClear
            style={{ width: 200 }}
            value={filters.keyword}
            onChange={(e) => setFilters({ ...filters, keyword: e.target.value })}
          />
          <Select placeholder="Lo·∫°i giao d·ªãch" allowClear style={{ width: 180 }} value={filters.type} onChange={(v) => setFilters({ ...filters, type: v })}>
            <Option value="TRANSFER">Chuy·ªÉn nh∆∞·ª£ng</Option>
            <Option value="SPLIT">T√°ch th·ª≠a</Option>
            <Option value="MERGE">G·ªôp th·ª≠a</Option>
            <Option value="CHANGE_PURPOSE">ƒê·ªïi m·ª•c ƒë√≠ch</Option>
            <Option value="REISSUE">C·∫•p l·∫°i GCN</Option>
          </Select>
          <Select placeholder="Tr·∫°ng th√°i" allowClear style={{ width: 150 }} value={filters.status} onChange={(v) => setFilters({ ...filters, status: v })}>
            <Option value="PENDING">Ch·ªù x·ª≠ l√Ω</Option>
            <Option value="VERIFIED">ƒê√£ th·∫©m ƒë·ªãnh</Option>
            <Option value="APPROVED">ƒê√£ ph√™ duy·ªát</Option>
            <Option value="REJECTED">B·ªã t·ª´ ch·ªëi</Option>
            <Option value="CONFIRMED">ƒê√£ x√°c nh·∫≠n</Option>
            <Option value="SUPPLEMENT_REQUESTED">Y√™u c·∫ßu b·ªï sung</Option>
          </Select>
          <Button icon={<SearchOutlined />} onClick={onSearch}>T√¨m ki·∫øm</Button>
          <Button icon={<ReloadOutlined />} onClick={() => loadMyTransactions()}>T·∫£i l·∫°i</Button>
          <Button type="primary" icon={<PlusOutlined />} onClick={() => setCreateOpen(true)}>T·∫°o giao d·ªãch</Button>
        </Space>
      }
    >
      {/* Org3 ch·ªâ xem giao d·ªãch c·ªßa m√¨nh - b·ªè tabs */}

      <Table
        rowKey={(r) => r.txID}
        loading={loading}
        dataSource={transactions}
        columns={columns}
        scroll={{ x: 1400 }}
        pagination={{ 
          pageSize: pageSize, 
          showSizeChanger: true,
          showQuickJumper: false,
          showTotal: false,
          onChange: (page, pageSize) => {
            console.log('Org3 Transaction page changed:', page, pageSize);
          },
          onShowSizeChange: (current, size) => {
            console.log('Org3 Transaction page size changed:', current, size);
            setPageSize(size);
          }
        }}
      />

      {/* Create Transaction */}
      <Modal 
        className="transaction-modal"
        title={
          <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
            <span style={{ fontSize: '18px' }}>üè†</span>
            <span>{selectedTransactionType ? `T·∫°o y√™u c·∫ßu: ${getTransactionTypeText(selectedTransactionType)}` : "Ch·ªçn lo·∫°i giao d·ªãch"}</span>
          </div>
        }
        open={createOpen} 
        onOk={selectedTransactionType && currentStep === 1 ? onCreate : null}
        onCancel={() => {
            setCreateOpen(false);
            form.resetFields();
            setSelectedDocuments({});
            setSelectedTransactionType(null);
            setMergeParcelIds(['', '']); // Reset merge fields
          }} 
          confirmLoading={loading}
        width={1400}
        okText={selectedTransactionType && currentStep === 1 ? "T·∫°o y√™u c·∫ßu" : undefined}
        cancelText="H·ªßy"
        style={{ top: 20 }}
        styles={{
          body: {
            maxHeight: '80vh',
            overflowY: 'auto',
            padding: '24px'
          }
        }}
        footer={(() => {
          if (!selectedTransactionType || currentStep === 0) {
            return [
              <Button key="cancel" onClick={() => {
                setCreateOpen(false);
                form.resetFields();
                setSelectedDocuments({});
                setSelectedTransactionType(null);
                setMergeParcelIds(['', '']); // Reset merge fields  
                setCurrentStep(0);
              }}>H·ªßy</Button>
            ];
          }
          // Footer ch·ªâ c√≥ 2 b∆∞·ªõc: ch·ªçn lo·∫°i v√† nh·∫≠p th√¥ng tin
          return [
            <Button key="back" onClick={() => setCurrentStep(prev => Math.max(0, prev - 1))}>Quay l·∫°i</Button>,
            <Button key="create" type="primary" loading={loading} onClick={onCreate}>T·∫°o y√™u c·∫ßu</Button>
          ];
        })()}
      >
        {renderCreateForm()}
      </Modal>

      {/* Confirm Transaction */}
      <Modal 
        title="X√°c nh·∫≠n giao d·ªãch chuy·ªÉn nh∆∞·ª£ng" 
        open={confirmOpen} 
        footer={[
          <Button key="cancel" onClick={() => {
            setConfirmOpen(false);
            confirmForm.resetFields();
          }}>
            H·ªßy
          </Button>,
          <Button 
            key="reject" 
            danger 
            loading={loading}
            onClick={() => onConfirm(false)}
          >
            T·ª´ ch·ªëi
          </Button>,
          <Button 
            key="accept" 
            type="primary" 
            loading={loading}
            onClick={() => onConfirm(true)}
          >
            Ch·∫•p nh·∫≠n
          </Button>
        ]}
        onCancel={() => {
          setConfirmOpen(false);
          confirmForm.resetFields();
        }} 
        width={600}
      >
        <Form layout="vertical" form={confirmForm}>
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="txID" label="M√£ giao d·ªãch">
                <Input disabled />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="landParcelID" label="M√£ th·ª≠a ƒë·∫•t">
                <Input disabled />
              </Form.Item>
            </Col>
          </Row>
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="toOwnerID" label="CCCD ng∆∞·ªùi nh·∫≠n">
                <Input disabled />
              </Form.Item>
            </Col>
          </Row>
          
          <Form.Item 
            label="L√Ω do (n·∫øu t·ª´ ch·ªëi)" 
            name="reason"
          >
            <TextArea 
              rows={3} 
              placeholder="Nh·∫≠p l√Ω do t·ª´ ch·ªëi (t√πy ch·ªçn)"
            />
          </Form.Item>
          
          <Alert
            message="Quy·∫øt ƒë·ªãnh v·ªÅ giao d·ªãch chuy·ªÉn nh∆∞·ª£ng"
            description="B·∫°n c√≥ th·ªÉ ch·∫•p nh·∫≠n ho·∫∑c t·ª´ ch·ªëi giao d·ªãch chuy·ªÉn nh∆∞·ª£ng n√†y. N·∫øu ch·∫•p nh·∫≠n, giao d·ªãch s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn c∆° quan c√≥ th·∫©m quy·ªÅn ƒë·ªÉ x√°c minh v√† ph√™ duy·ªát. N·∫øu t·ª´ ch·ªëi, giao d·ªãch s·∫Ω ƒë∆∞·ª£c ƒë√≥ng."
            type="info"
            showIcon
            style={{ marginTop: 16 }}
          />
        </Form>
      </Modal>

      {/* Transaction Detail */}
      <Drawer title="Chi ti·∫øt giao d·ªãch" width={800} open={detailOpen} onClose={() => setDetailOpen(false)}>
        {selected && (
          <div>
            <Row gutter={16}>
              <Col span={12}><strong>M√£ giao d·ªãch:</strong> {selected.txId || selected.txID}</Col>
              <Col span={12}><strong>Lo·∫°i:</strong> {getTypeTag(selected.type)}</Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={12}><strong>Th·ª≠a ƒë·∫•t:</strong> {selected.landParcelId}</Col>
              <Col span={12}><strong>Tr·∫°ng th√°i:</strong> {getStatusTag(selected.status)}</Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={12}><strong>Ng∆∞·ªùi g·ª≠i:</strong> {selected.fromOwnerId}</Col>
              <Col span={12}><strong>Ng∆∞·ªùi nh·∫≠n:</strong> {selected.toOwnerId || '-'}</Col>
            </Row>
            <Row gutter={16} style={{ marginTop: 12 }}>
              <Col span={12}><strong>Ng√†y t·∫°o:</strong> {selected.createdAt ? new Date(selected.createdAt).toLocaleDateString('vi-VN') : 'N/A'}</Col>
              <Col span={12}><strong>Ng√†y c·∫≠p nh·∫≠t:</strong> {selected.updatedAt ? new Date(selected.updatedAt).toLocaleDateString('vi-VN') : 'N/A'}</Col>
            </Row>
            
            {selected.details && (
              <div style={{ marginTop: 16 }}>
                <strong>Chi ti·∫øt:</strong>
                <div style={{ 
                  marginTop: 8, 
                  padding: 12, 
                  background: '#f5f5f5', 
                  borderRadius: 4,
                  borderLeft: '4px solid #1890ff'
                }}>
                  {selected.details}
                </div>
              </div>
            )}
            
            {selected.notes && (
              <div style={{ marginTop: 12 }}>
                <strong>Ghi ch√∫:</strong> {selected.notes}
              </div>
            )}

            <Divider>T√†i li·ªáu ƒë√≠nh k√®m</Divider>
            
            {selected.documentIds && selected.documentIds.length > 0 && (
              <div style={{ marginTop: 16 }}>
                <strong>T√†i li·ªáu ƒë√≠nh k√®m:</strong>
                <div style={{ marginTop: 8 }}>
                  {documentsLoading ? (
                    // Loading skeleton gi·ªëng Org2
                    <div>
                      {[1, 2, 3].map((i) => (
                        <div key={i} style={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'space-between',
                          padding: '8px 12px',
                          marginBottom: '8px',
                          background: '#f8f9fa',
                          borderRadius: '6px',
                          border: '1px solid #e9ecef'
                        }}>
                          <div style={{ flex: 1 }}>
                            <div style={{ width: '60%', height: '16px', background: '#e9ecef', borderRadius: '4px', marginBottom: '4px' }} />
                            <div style={{ width: '40%', height: '12px', background: '#e9ecef', borderRadius: '4px' }} />
                          </div>
                          <Space>
                            <div style={{ width: '60px', height: '24px', background: '#e9ecef', borderRadius: '4px' }} />
                          </Space>
                        </div>
                      ))}
                    </div>
                  ) : documents && documents.length > 0 ? (
                    // Hi·ªÉn th·ªã t√†i li·ªáu - Org3 c√≥ th·ªÉ xem t√†i li·ªáu theo ID
                    <div>
                      <div style={{ marginBottom: '8px', color: '#666', fontSize: '12px' }}>
                        {documents.length} t√†i li·ªáu
                      </div>
                      {documents.map((doc, index) => (
                        <div key={index} style={{ 
                          display: 'flex', 
                          alignItems: 'center', 
                          justifyContent: 'space-between',
                          padding: '8px 12px',
                          marginBottom: '8px',
                          background: '#f8f9fa',
                          borderRadius: '6px',
                          border: '1px solid #e9ecef'
                        }}>
                          <div style={{ flex: 1 }}>
                            <div style={{ fontWeight: '500', color: '#1890ff' }}>
                              {doc.title || doc.docID}
                            </div>
                            <div style={{ fontSize: '12px', color: '#666', marginTop: '2px' }}>
                              {doc.type} ‚Ä¢ {doc.fileSize ? `${(doc.fileSize / 1024).toFixed(2)} KB` : 'N/A'}
                            </div>
                          </div>
                          <Space>
                            <Tooltip title="Xem chi ti·∫øt t√†i li·ªáu">
                              <Button 
                                type="text" 
                                icon={<FileTextOutlined />} 
                                size="small"
                                onClick={() => onViewDocumentDetail(doc)}
                                style={{ color: '#1890ff' }}
                              />
                            </Tooltip>
                            <Tag 
                              color={getDocumentStatusColor(doc)} 
                              size="small"
                              style={{ 
                                width: '120px',
                                minWidth: '120px',
                                textAlign: 'center',
                                fontSize: '12px',
                                fontWeight: '500',
                                padding: '4px 12px'
                              }}
                            >
                              {getDocumentStatusText(doc)}
                            </Tag>
                          </Space>
                        </div>
                      ))}
                    </div>
                  ) : (
                    // Kh√¥ng c√≥ t√†i li·ªáu gi·ªëng Org2
                    <div style={{ 
                      padding: '16px', 
                      textAlign: 'center', 
                      color: '#999',
                      background: '#f8f9fa',
                      borderRadius: '6px',
                      border: '1px dashed #e9ecef'
                    }}>
                      <FileTextOutlined style={{ fontSize: '24px', marginBottom: '8px', color: '#ccc' }} />
                      <div>Ch∆∞a c√≥ t√†i li·ªáu ƒë√≠nh k√®m</div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Accept/Reject Transfer buttons for recipients */}
            {(() => {
              const currentUser = authService.getCurrentUser();
              const isRecipient = selected.type === 'TRANSFER' && 
                                selected.toOwnerId === currentUser?.userId && 
                                selected.status === 'PENDING';
              
              if (isRecipient) {
                return (
                  <div style={{ marginTop: 24 }}>
                    <Divider>X√°c nh·∫≠n chuy·ªÉn nh∆∞·ª£ng</Divider>
                    <div style={{
                      background: '#f0f9ff',
                      border: '1px solid #d6e4ff',
                      borderRadius: '8px',
                      padding: '20px',
                      textAlign: 'center'
                    }}>
                      <div style={{ marginBottom: 16 }}>
                        <Text strong style={{ fontSize: '16px', color: '#1890ff' }}>
                          üîî B·∫°n l√† ng∆∞·ªùi nh·∫≠n chuy·ªÉn nh∆∞·ª£ng
                        </Text>
                      </div>
                      <div style={{ marginBottom: 20, color: '#666', lineHeight: 1.6 }}>
                        Giao d·ªãch chuy·ªÉn nh∆∞·ª£ng n√†y c·∫ßn s·ª± x√°c nh·∫≠n c·ªßa b·∫°n ƒë·ªÉ c√≥ th·ªÉ ti·∫øp t·ª•c ƒë∆∞·ª£c x·ª≠ l√Ω.
                        Vui l√≤ng xem x√©t k·ªπ c√°c t√†i li·ªáu ƒë√≠nh k√®m v√† quy·∫øt ƒë·ªãnh ch·∫•p nh·∫≠n ho·∫∑c t·ª´ ch·ªëi.
                      </div>
                      <Space size="large">
                        <Button
                          type="primary"
                          size="large"
                          icon={<CheckCircleOutlined />}
                          loading={loading}
                          onClick={async () => {
                            try {
                              setLoading(true);
                              
                              await transactionService.confirmTransfer({
                                txID: selected.txId,
                                landParcelID: selected.landParcelId,
                                toOwnerID: selected.toOwnerId,
                                isAccepted: true,
                                reason: ''
                              });
                              
                              message.success('Ch·∫•p nh·∫≠n giao d·ªãch chuy·ªÉn nh∆∞·ª£ng th√†nh c√¥ng!');
                              setDetailOpen(false);
                              loadMyTransactions();
                            } catch (e) {
                              message.error(e.message || 'Ch·∫•p nh·∫≠n th·∫•t b·∫°i');
                            } finally {
                              setLoading(false);
                            }
                          }}
                          style={{ minWidth: '140px' }}
                        >
                          Nh·∫≠n chuy·ªÉn nh∆∞·ª£ng
                        </Button>
                        <Button
                          danger
                          size="large"
                          loading={loading}
                          onClick={async () => {
                            try {
                              setLoading(true);
                              
                              await transactionService.confirmTransfer({
                                txID: selected.txId,
                                landParcelID: selected.landParcelId,
                                toOwnerID: selected.toOwnerId,
                                isAccepted: false,
                                reason: 'T·ª´ ch·ªëi chuy·ªÉn nh∆∞·ª£ng'
                              });
                              
                              message.success('T·ª´ ch·ªëi giao d·ªãch chuy·ªÉn nh∆∞·ª£ng th√†nh c√¥ng!');
                              setDetailOpen(false);
                              loadMyTransactions();
                            } catch (e) {
                              message.error(e.message || 'T·ª´ ch·ªëi th·∫•t b·∫°i');
                            } finally {
                              setLoading(false);
                            }
                          }}
                          style={{ minWidth: '140px' }}
                        >
                          T·ª´ ch·ªëi
                        </Button>
                      </Space>
                      <div style={{ marginTop: 16, fontSize: '12px', color: '#999' }}>
                        üí° Sau khi x√°c nh·∫≠n, giao d·ªãch s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn c∆° quan c√≥ th·∫©m quy·ªÅn ƒë·ªÉ th·∫©m ƒë·ªãnh v√† ph√™ duy·ªát.
                      </div>
                    </div>
                  </div>
                );
              }
              return null;
            })()}
          </div>
        )}
      </Drawer>

      {/* Link Supplement Documents Modal - UC-18 */}
      <Modal
        title="B·ªï sung t√†i li·ªáu cho giao d·ªãch"
        open={linkDocumentOpen}
        onOk={onLinkSupplementDocuments}
        onCancel={() => {
          setLinkDocumentOpen(false);
          linkDocumentForm.resetFields();
        }}
        confirmLoading={loading}
        width={800}
        okText="Li√™n k·∫øt t√†i li·ªáu"
        cancelText="H·ªßy"
      >
        <div>
          <Alert
            message="Giao d·ªãch c·∫ßn b·ªï sung t√†i li·ªáu"
            description={
              <div>
                <div>C√°n b·ªô UBND c·∫•p x√£ ƒë√£ y√™u c·∫ßu b·ªï sung t√†i li·ªáu cho giao d·ªãch n√†y.</div>
                <div style={{ marginTop: 8 }}>
                  <strong>M√£ giao d·ªãch:</strong> {selected?.txId} | 
                  <strong> Lo·∫°i:</strong> {selected ? getTransactionTypeText(selected.type) : ''}
                </div>
                {selected?.details && (
                  <div style={{ marginTop: 8 }}>
                    <strong>Chi ti·∫øt y√™u c·∫ßu:</strong> {selected.details}
                  </div>
                )}
              </div>
            }
            type="warning"
            showIcon
            style={{ marginBottom: 16 }}
          />

          <Form form={linkDocumentForm} layout="vertical">
            <Form.Item
              name="selectedDocuments"
              label="Ch·ªçn t√†i li·ªáu b·ªï sung:"
              rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt t√†i li·ªáu' }]}
            >
              <Select
                mode="multiple"
                placeholder={
                  (() => {
                    const availableDocs = userDocuments.filter(doc => {
                      const existingDocIds = selected?.documentIds || [];
                      return !existingDocIds.includes(doc.docID);
                    });
                    return availableDocs.length > 0 
                      ? "Ch·ªçn t√†i li·ªáu t·ª´ danh s√°ch c·ªßa b·∫°n"
                      : "Kh√¥ng c√≥ t√†i li·ªáu n√†o c√≥ th·ªÉ b·ªï sung";
                  })()
                }
                style={{ width: '100%' }}
                disabled={(() => {
                  const availableDocs = userDocuments.filter(doc => {
                    const existingDocIds = selected?.documentIds || [];
                    return !existingDocIds.includes(doc.docID);
                  });
                  return availableDocs.length === 0;
                })()}
                filterOption={(input, option) =>
                  option.children.props.children[0].props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
                }
              >
                {userDocuments
                  .filter(doc => {
                    // L·ªçc ra nh·ªØng t√†i li·ªáu ch∆∞a ƒë∆∞·ª£c link v·ªõi giao d·ªãch n√†y
                    const existingDocIds = selected?.documentIds || [];
                    return !existingDocIds.includes(doc.docID);
                  })
                  .map(doc => (
                  <Option key={`supplement-doc-${doc.docID}`} value={doc.docID}>
                    <div>
                      <strong>{doc.title}</strong>
                      <div style={{ fontSize: '12px', color: '#666' }}>
                        {doc.type} | {doc.status === 'VERIFIED' ? '‚úÖ ƒê√£ x√°c minh' : doc.status === 'REJECTED' ? '‚ùå Kh√¥ng h·ª£p l·ªá' : '‚è≥ Ch·ªù x√°c minh'}
                      </div>
                    </div>
                  </Option>
                ))}
              </Select>
            </Form.Item>
            
            {(() => {
              const availableDocs = userDocuments.filter(doc => {
                const existingDocIds = selected?.documentIds || [];
                return !existingDocIds.includes(doc.docID);
              });
              const existingCount = (selected?.documentIds || []).length;
              const totalCount = userDocuments.length;
              
              if (availableDocs.length === 0 && totalCount > 0) {
                return (
                  <div style={{ 
                    marginTop: -12, 
                    marginBottom: 12,
                    padding: 12, 
                    backgroundColor: '#fff2f0', 
                    borderRadius: 4,
                    border: '1px solid #ffccc7'
                  }}>
                    <div style={{ color: '#ff4d4f', fontSize: '14px', marginBottom: 4 }}>
                      ‚ö†Ô∏è <strong>Kh√¥ng c√≥ t√†i li·ªáu m·ªõi ƒë·ªÉ b·ªï sung</strong>
                    </div>
                    <div style={{ fontSize: '12px', color: '#666' }}>
                      T·∫•t c·∫£ {totalCount} t√†i li·ªáu c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c li√™n k·∫øt v·ªõi giao d·ªãch n√†y r·ªìi.
                      B·∫°n c·∫ßn t·∫°o t√†i li·ªáu m·ªõi tr∆∞·ªõc khi c√≥ th·ªÉ b·ªï sung.
                    </div>
                  </div>
                );
              } else if (availableDocs.length > 0 && existingCount > 0) {
                return (
                  <div style={{ 
                    marginTop: -12, 
                    marginBottom: 12,
                    padding: 8, 
                    backgroundColor: '#f0f9ff', 
                    borderRadius: 4,
                    fontSize: '12px',
                    color: '#1890ff'
                  }}>
                    üìä C√≥ {availableDocs.length} t√†i li·ªáu c√≥ th·ªÉ b·ªï sung (T·ªïng c·ªông: {totalCount}, ƒê√£ li√™n k·∫øt: {existingCount})
                  </div>
                );
              }
              return null;
            })()}

            <div style={{ marginTop: 16, padding: 12, backgroundColor: '#f0f0f0', borderRadius: 4 }}>
              <Text type="secondary" style={{ fontSize: '12px' }}>
                üí° <strong>L∆∞u √Ω:</strong> Sau khi li√™n k·∫øt t√†i li·ªáu b·ªï sung, giao d·ªãch s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t l·∫°i v·ªÅ tr·∫°ng th√°i "Ch·ªù x·ª≠ l√Ω" 
                ƒë·ªÉ c√°n b·ªô UBND c·∫•p x√£ xem x√©t l·∫°i h·ªì s∆° ƒë√£ b·ªï sung.
              </Text>
            </div>
          </Form>
        </div>
      </Modal>

      {/* Transaction History */}
      <Drawer 
        title="L·ªãch s·ª≠ thay ƒë·ªïi giao d·ªãch" 
        width={800} 
        open={historyOpen} 
        onClose={() => setHistoryOpen(false)}
      >
        {selected && (
          <div>
            <div style={{ marginBottom: 16, padding: 12, background: '#f0f9ff', borderRadius: 4 }}>
              <Row gutter={16}>
                <Col span={12}><strong>M√£ giao d·ªãch:</strong> {selected.txId || selected.txID}</Col>
                <Col span={12}><strong>Lo·∫°i:</strong> {getTypeTag(selected.type)}</Col>
              </Row>
              <Row gutter={16} style={{ marginTop: 8 }}>
                <Col span={12}><strong>Th·ª≠a ƒë·∫•t:</strong> {selected.landParcelId}</Col>
                <Col span={12}><strong>Tr·∫°ng th√°i hi·ªán t·∫°i:</strong> {getStatusTag(selected.status)}</Col>
              </Row>
            </div>

            {history.length > 0 ? (
              <div>
                <h4>Timeline thay ƒë·ªïi ({history.length} b·∫£n ghi):</h4>
                <div style={{ maxHeight: 600, overflowY: 'auto' }}>
                  {history.map((item, index) => {
                    // X·ª≠ l√Ω timestamp ƒë√∫ng c√°ch
                    const formatTimestamp = (timestamp) => {
                      if (!timestamp) return 'N/A';
                      
                      let date;
                      if (timestamp.seconds) {
                        // Timestamp t·ª´ blockchain (seconds + nanos)
                        date = new Date(timestamp.seconds * 1000 + (timestamp.nanos || 0) / 1000000);
                      } else {
                        // Timestamp th√¥ng th∆∞·ªùng
                        date = new Date(timestamp);
                      }
                      
                      return date.toLocaleString('vi-VN', {
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit'
                      });
                    };

                    return (
                    <div key={index} style={{ 
                        padding: 16, 
                        marginBottom: 12, 
                        background: '#ffffff', 
                        border: '1px solid #e8e8e8',
                        borderRadius: 6,
                        borderLeft: '4px solid #1890ff',
                        boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
                      }}>
                        <div style={{ marginBottom: 8 }}>
                          <strong>B∆∞·ªõc {history.length - index}:</strong>
                          <span style={{ float: 'right', color: '#666', fontSize: '12px' }}>
                            {formatTimestamp(item.timestamp)}
                          </span>
                    </div>
                        
                        {item.transaction && (
                          <div>
                            <div style={{ marginBottom: 4 }}>
                              <strong>Tr·∫°ng th√°i:</strong> {getStatusTag(item.transaction.status)}
                            </div>
                            
                            {item.transaction.details && (
                              <div style={{ marginBottom: 4 }}>
                                <strong>Chi ti·∫øt:</strong> {item.transaction.details}
                              </div>
                            )}
                            
                            {item.transaction.documentIds && item.transaction.documentIds.length > 0 && (
                              <div style={{ marginBottom: 4 }}>
                                <strong>T√†i li·ªáu ƒë√≠nh k√®m:</strong> 
                                <div style={{ marginTop: 4 }}>
                                  {item.transaction.documentIds.map((docId, docIndex) => (
                                    <Tag key={docIndex} size="small" style={{ marginBottom: 2 }}>
                                      {docId}
                                    </Tag>
                  ))}
                </div>
                              </div>
                            )}
                            
                            <div style={{ marginTop: 8, fontSize: '12px', color: '#999' }}>
                              <strong>Blockchain TX:</strong> {item.txId?.substring(0, 16)}...
                              {item.isDelete && <Tag color="red" size="small" style={{ marginLeft: 8 }}>ƒê√£ x√≥a</Tag>}
                            </div>
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              </div>
            ) : (
              <div style={{ textAlign: 'center', padding: 40, color: '#999' }}>
                <div style={{ fontSize: '16px', marginBottom: 8 }}>Ch∆∞a c√≥ l·ªãch s·ª≠ thay ƒë·ªïi</div>
                <div style={{ fontSize: '14px' }}>Giao d·ªãch n√†y ch∆∞a c√≥ b·∫•t k·ª≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c ghi l·∫°i.</div>
              </div>
            )}
          </div>
        )}
      </Drawer>

      {/* Document Detail Modal */}
      <DocumentDetailModal
        document={selectedDocument}
        visible={documentDetailOpen}
        onClose={() => setDocumentDetailOpen(false)}
        onVerify={null} // Org3 kh√¥ng c√≥ quy·ªÅn x√°c th·ª±c
        onReject={null} // Org3 kh√¥ng c√≥ quy·ªÅn t·ª´ ch·ªëi
        userRole="Org3"
      />
    </Card>
  );
};

export default TransactionManagementPage;
